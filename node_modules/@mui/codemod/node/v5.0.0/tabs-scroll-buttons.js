"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = transformer;

/**
 * @param {import('jscodeshift').FileInfo} file
 * @param {import('jscodeshift').API} api
 */
function transformer(file, api, options) {
  const j = api.jscodeshift;
  const root = j(file.source);
  const printOptions = options.printOptions;
  root.findJSXElements('Tabs').forEach(({
    node
  }) => {
    let prevScrollButtonValue;
    node.openingElement.attributes.forEach(attr => {
      if (attr.name && attr.name.name === 'scrollButtons') {
        if (attr.value) {
          var _attr$value$expressio, _attr$value$expressio2, _attr$value$expressio3, _attr$value$expressio4;

          prevScrollButtonValue = attr.value.value || ((_attr$value$expressio = attr.value.expression) == null ? void 0 : _attr$value$expressio.value);

          if (attr.value.value === 'on' || ((_attr$value$expressio2 = attr.value.expression) == null ? void 0 : _attr$value$expressio2.value) === 'on') {
            delete attr.value;
          } else if (attr.value.value === 'desktop' || ((_attr$value$expressio3 = attr.value.expression) == null ? void 0 : _attr$value$expressio3.value) === 'desktop') {
            delete attr.value;
          } else if (attr.value.value === 'off' || ((_attr$value$expressio4 = attr.value.expression) == null ? void 0 : _attr$value$expressio4.value) === 'off') {
            attr.value = j.jsxExpressionContainer(j.literal(false));
          }
        }
      }
    });

    if (prevScrollButtonValue === 'on') {
      node.openingElement.attributes.push(j.jsxAttribute(j.jsxIdentifier('allowScrollButtonsMobile')));
    }
  });
  return root.toSource(printOptions);
}