"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = transformer;

/**
 * @param {import('jscodeshift').FileInfo} file
 * @param {import('jscodeshift').API} api
 */
function transformer(file, api, options) {
  const j = api.jscodeshift;
  const printOptions = options.printOptions;
  const source = j(file.source).find(j.JSXElement).filter(({
    node
  }) => {
    var _node$openingElement$;

    return (_node$openingElement$ = node.openingElement.name.name) == null ? void 0 : _node$openingElement$.match(/^(Pagination|PaginationItem)$/);
  }).forEach(path => {
    path.node.openingElement.attributes.forEach(node => {
      var _node$value$expressio;

      if (node.type === 'JSXAttribute' && node.name.name === 'shape' && (node.value.value === 'round' || ((_node$value$expressio = node.value.expression) == null ? void 0 : _node$value$expressio.value) === 'round')) {
        node.value = j.literal('circular');
      }

      if (node.type === 'JSXAttribute' && node.name.name === 'classes') {
        var _node$value, _node$value$expressio2;

        (((_node$value = node.value) == null ? void 0 : (_node$value$expressio2 = _node$value.expression) == null ? void 0 : _node$value$expressio2.properties) || []).forEach(subNode => {
          if (subNode.key.name === 'round') {
            subNode.key.name = 'circular';
          }
        });
      }
    });
  }).toSource(printOptions);
  return source.replace(/\.(MuiPagination|MuiPaginationItem)-round/gm, '.$1-circular');
}