"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = transformer;

/**
 * @param {import('jscodeshift').FileInfo} file
 * @param {import('jscodeshift').API} api
 */
function transformer(file, api, options) {
  const j = api.jscodeshift;
  const printOptions = options.printOptions;
  const source = j(file.source).findJSXElements('Skeleton').forEach(path => {
    path.node.openingElement.attributes.forEach(node => {
      if (node.type === 'JSXAttribute' && node.name.name === 'variant') {
        var _node$value$expressio, _node$value$expressio2;

        if (node.value.value === 'circle' || ((_node$value$expressio = node.value.expression) == null ? void 0 : _node$value$expressio.value) === 'circle') {
          node.value = j.literal('circular');
        }

        if (node.value.value === 'rect' || ((_node$value$expressio2 = node.value.expression) == null ? void 0 : _node$value$expressio2.value) === 'rect') {
          node.value = j.literal('rectangular');
        }
      }

      if (node.type === 'JSXAttribute' && node.name.name === 'classes') {
        var _node$value, _node$value$expressio3, _node$value$expressio4;

        (_node$value = node.value) == null ? void 0 : (_node$value$expressio3 = _node$value.expression) == null ? void 0 : (_node$value$expressio4 = _node$value$expressio3.properties) == null ? void 0 : _node$value$expressio4.forEach(subNode => {
          if (subNode.key.name === 'circle') {
            subNode.key.name = 'circular';
          }

          if (subNode.key.name === 'rect') {
            subNode.key.name = 'rectangular';
          }
        });
      }
    });
  }).toSource(printOptions);
  return source.replace(/\.MuiSkeleton-circle/gm, '.MuiSkeleton-circular').replace(/\.MuiSkeleton-rect([^\w])/gm, '.MuiSkeleton-rectangular$1');
}