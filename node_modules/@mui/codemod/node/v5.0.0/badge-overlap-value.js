"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = transformer;

/**
 * @param {import('jscodeshift').FileInfo} file
 * @param {import('jscodeshift').API} api
 */
function transformer(file, api, options) {
  const j = api.jscodeshift;
  const printOptions = options.printOptions;
  const source = j(file.source).findJSXElements('Badge').forEach(path => {
    path.node.openingElement.attributes.forEach(node => {
      var _node$value, _node$value$expressio3;

      if (node.type === 'JSXAttribute' && node.name.name === 'overlap') {
        var _node$value$expressio, _node$value$expressio2;

        if (node.value.value === 'circle' || ((_node$value$expressio = node.value.expression) == null ? void 0 : _node$value$expressio.value) === 'circle') {
          node.value = j.literal('circular');
        } else if (node.value.value === 'rectangle' || ((_node$value$expressio2 = node.value.expression) == null ? void 0 : _node$value$expressio2.value) === 'rectangle') {
          node.value = j.literal('rectangular');
        }
      }

      if (node.type === 'JSXAttribute' && node.name.name === 'classes' && Array.isArray((_node$value = node.value) == null ? void 0 : (_node$value$expressio3 = _node$value.expression) == null ? void 0 : _node$value$expressio3.properties)) {
        var _node$value2, _node$value2$expressi, _node$value2$expressi2;

        (_node$value2 = node.value) == null ? void 0 : (_node$value2$expressi = _node$value2.expression) == null ? void 0 : (_node$value2$expressi2 = _node$value2$expressi.properties) == null ? void 0 : _node$value2$expressi2.forEach(subNode => {
          if (subNode.key) {
            if (subNode.key.name.endsWith('Circle')) {
              subNode.key.name = subNode.key.name.replace('Circle', 'Circular');
            }

            if (subNode.key.name.endsWith('Rectangle')) {
              subNode.key.name = subNode.key.name.replace('Rectangle', 'Rectangular');
            }
          }
        });
      }
    });
  }).toSource(printOptions);
  return source.replace(/(\.MuiBadge-.*)ircle/gm, '$1ircular').replace(/(\.MuiBadge-.*)ectangle/gm, '$1ectangular');
}